=== tests/cases/compiler/typeParameterConstraints2.ts ===
declare function test1<Fn extends <Context>(arg1: Context) => [Context]>(fn: Fn): ReturnType<Fn>;
>test1 : Symbol(test1, Decl(typeParameterConstraints2.ts, 0, 0))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 0, 23))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 0, 35))
>arg1 : Symbol(arg1, Decl(typeParameterConstraints2.ts, 0, 44))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 0, 35))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 0, 35))
>fn : Symbol(fn, Decl(typeParameterConstraints2.ts, 0, 73))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 0, 23))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 0, 23))

declare function test2<Fn extends <Context>(arg1: Context) => { key: Context }>(fn: Fn): ReturnType<Fn>;
>test2 : Symbol(test2, Decl(typeParameterConstraints2.ts, 0, 97))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 1, 23))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 1, 35))
>arg1 : Symbol(arg1, Decl(typeParameterConstraints2.ts, 1, 44))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 1, 35))
>key : Symbol(key, Decl(typeParameterConstraints2.ts, 1, 63))
>Context : Symbol(Context, Decl(typeParameterConstraints2.ts, 1, 35))
>fn : Symbol(fn, Decl(typeParameterConstraints2.ts, 1, 80))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 1, 23))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>Fn : Symbol(Fn, Decl(typeParameterConstraints2.ts, 1, 23))

// Ok in TypeScript 4.4.2
test1((arg2) => [arg2]);
>test1 : Symbol(test1, Decl(typeParameterConstraints2.ts, 0, 0))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 4, 7))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 4, 7))

// Error in TypeScript 3.3.3 - 4.4.2;
// TS2719: Type 'Context' is not assignable to type 'Context'. Two different types with this name exist, but they are unrelated.
//   'Context' could be instantiated with an arbitrary type which could be unrelated to 'Context'.
test2((arg2) => ({ key: arg2 }));
>test2 : Symbol(test2, Decl(typeParameterConstraints2.ts, 0, 97))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 9, 7))
>key : Symbol(key, Decl(typeParameterConstraints2.ts, 9, 18))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 9, 7))

// Error in TypeScript 3.3.3 - 4.4.2;
// TS2345: Argument of type '<Context>(arg2: Context) => { key: Context; }' is not assignable to parameter of type '<Context>(arg1: Context) => { key: Context; }'.
//   Call signature return types '{ key: Context; }' and '{ key: Context; }' are incompatible.
//     The types of 'key' are incompatible between these types.
//       Type 'Context' is not assignable to type 'Context'. Two different types with this name exist, but they are unrelated.
//         'Context' could be instantiated with an arbitrary type which could be unrelated to 'Context'.
test2((arg2) => { return { key: arg2 } });
>test2 : Symbol(test2, Decl(typeParameterConstraints2.ts, 0, 97))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 17, 7))
>key : Symbol(key, Decl(typeParameterConstraints2.ts, 17, 26))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 17, 7))

test2(function(arg2) { return { key: arg2 }; });
>test2 : Symbol(test2, Decl(typeParameterConstraints2.ts, 0, 97))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 18, 15))
>key : Symbol(key, Decl(typeParameterConstraints2.ts, 18, 31))
>arg2 : Symbol(arg2, Decl(typeParameterConstraints2.ts, 18, 15))

